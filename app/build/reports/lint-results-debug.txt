C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\build.gradle:13: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk = 34
        ~~~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application or sdk runs on a version of Android that is more
   recent than your targetSdkVersion specifies that it has been tested with,
   various compatibility modes kick in. This ensures that your application
   continues to work, but it may look out of place. For example, if the
   targetSdkVersion is less than 14, your app may get an option button in the
   UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\java\com\example\mydpcproject\PostProvisioningTask.java:78: Warning: Use @RequiresApi(Build.VERSION_CODES.O) instead of @TargetApi` to propagate the requirement to callers of maybeSetAffiliationId [UseRequiresApi]
  @TargetApi(Build.VERSION_CODES.O)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\java\com\example\mydpcproject\PostProvisioningTask.java:90: Warning: Use @RequiresApi(Build.VERSION_CODES.M) instead of @TargetApi` to propagate the requirement to callers of autoGrantPermissions [UseRequiresApi]
  @TargetApi(Build.VERSION_CODES.M)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UseRequiresApi":
   The @TargetApi annotation only suppresses API warnings locally.
   @RequiresApi on the other hand will propagate the requirement out to any
   callers of this API, making sure that they either perform API level checks
   (using for example SDK_INT), or defining @RequiresApi annotations
   themselves.

   (The @TargetApi annotation predates @RequiresApi, and was introduced as an
   early way to suppress lint API warnings for a particular API level.
   Accidentally using @TargetApi can lead to crashes since there is no check
   that other calls to this method actually check that the call is safe.)

C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\res\values\themes.xml:11: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>
                                            ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\res\mipmap-mdpi\ic_launcher_round.webp: Warning: The resource R.mipmap.ic_launcher_round appears to be unused [UnusedResources]

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

   Available options:

   **skip-libraries** (default is true):
   Whether the unused resource check should skip reporting unused resources in libraries.

   Many libraries will declare resources that are part of the library surface; other modules depending on the library will also reference the resources. To avoid reporting all these resources as unused (in the context of a library), the unused resource check normally skips reporting unused resources in libraries. Instead, run the unused resource check on the consuming app module (along with `checkDependencies=true`).

   However, there are cases where you want to check that all the resources declared in a library are used; in that case, you can disable the skip option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UnusedResources">
           <option name="skip-libraries" value="true" />
       </issue>
   </lint>
   ```

C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\res\layout\activity_main.xml:10: Warning: Hardcoded string "Hello DPC!", should use @string resource [HardcodedText]
        android:text="Hello DPC!" />
        ~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\res\layout\setup_management_fragment.xml:14: Warning: Hardcoded string "How will you use this phone?", should use @string resource [HardcodedText]
    android:text="How will you use this phone?"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\res\layout\setup_management_fragment.xml:29: Warning: Hardcoded string "Use for work only", should use @string resource [HardcodedText]
            android:text="Use for work only" />
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\res\layout\setup_management_fragment.xml:35: Warning: Hardcoded string "Use for work & personal", should use @string resource [HardcodedText]
            android:text="Use for work &amp; personal" />
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\maxim.kucherov\Documents\GitHub\MyDpcProject\app\src\main\res\layout\setup_management_fragment.xml:40: Warning: Hardcoded string "Next", should use @string resource [HardcodedText]
        android:text="Next"
        ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 11 warnings
